{"ast":null,"code":"// MIT License\n// Copyright (c) 2021 Emmadi Sumith Kumar\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nimport chalk from \"chalk\";\n/**\n * Convert JSON-like data or plain JavaScript objects to formatted plain text representation.\n *\n * @function jsonToPlainText\n * @param data {unknown} - The input data to convert. Can be JSON-like data or plain JavaScript objects.\n * @param options {Options} - (Optional) Configuration options for customizing the output.\n *   - color {boolean} - Whether to apply colors to the output (default: true).\n *   - spacing {boolean} - Whether to include spacing after colons (default: true).\n *   - squareBracketsForArray {boolean} - Whether to use square brackets for arrays (default: false).\n *   - doubleQuotesForKeys {boolean} - Whether to use double quotes for object keys (default: false).\n *   - doubleQuotesForValues {boolean} - Whether to use double quotes for string values (default: false).\n * @returns {string} - The formatted plain text representation of the input data.\n * @example\n * // Basic usage:\n * const data = { name: \"John\", age: 30, isEmployed: true };\n * const options = {\n *    color: true,\n *    spacing: true,\n *    squareBracketsForArray: false,\n *    doubleQuotesForKeys: false,\n *    doubleQuotesForValues: false,\n * }\n * const plainText = jsonToPlainText(data);\n * console.log(plainText);\n *\n * // Output:\n * //\n * //   name : \"John\",\n * //   age : 30,\n * //   isEmployed : true\n */\nfunction jsonToPlainText(data, options) {\n  const visited = new Set();\n  let indentLevel = 1;\n  const defaultOptions = {\n    color: true,\n    spacing: true,\n    squareBracketsForArray: false,\n    doubleQuotesForKeys: false,\n    doubleQuotesForValues: false\n  };\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options\n  }; // Merge user-provided options with default options\n  const outputOptions = {\n    color: mergedOptions.color,\n    spacing: mergedOptions.spacing,\n    squareBracketsForArray: mergedOptions.squareBracketsForArray,\n    doubleQuotesForKeys: mergedOptions.doubleQuotesForKeys,\n    doubleQuotesForValues: mergedOptions.doubleQuotesForValues\n  };\n  // Helper function to determine the type of a variable\n  function getType(variable) {\n    const type = typeof variable;\n    // Identify the specific type for object-like variables (null, array, object, date, regexp)\n    if (type === \"object\") {\n      if (variable === null) return \"null\";\n      if (Array.isArray(variable)) return \"array\";\n      if (variable instanceof Date) return \"date\";\n      if (variable instanceof RegExp) return \"regexp\";\n      return \"object\";\n    }\n    return type;\n  }\n  // Helper function to handle arrays\n  function handleArray(arr) {\n    let output = \"\";\n    if (arr.length === 0) {\n      output += \"[]\";\n      return output;\n    }\n    arr.forEach((item, index) => {\n      const handler = handlers[getType(item)];\n      if (!handler) {\n        throw new Error(\"Unsupported data type: \" + getType(item));\n      }\n      if (index === 0) {\n        output += handler(item, true);\n      } else {\n        output += \", \" + handler(item, true);\n      }\n    });\n    return outputOptions.squareBracketsForArray ? \"[ \" + output + \" ]\" : output;\n  }\n  // Helper function to handle objects\n  function handleObject(obj) {\n    let output = \"\";\n    if (Object.keys(obj).length === 0) {\n      output += \"{}\";\n      return output;\n    }\n    const keys = Object.keys(obj);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    keys.forEach((key, index) => {\n      const value = obj[key];\n      const handler = handlers[getType(value)];\n      if (typeof value === \"undefined\") {\n        return;\n      }\n      if (!handler) {\n        throw new Error(\"Unsupported data type: \" + getType(value));\n      }\n      if (key.length >= indentLevel) {\n        indentLevel = key.length;\n      }\n      output += \"\\n\" + (outputOptions.doubleQuotesForKeys ? '\"' + (outputOptions.color ? chalk.greenBright(key) : key) + '\"' : outputOptions.color ? chalk.green(key) : key) + \"}json-to-plain-text-special-string-\" + key.length + \"{\" + handler(value, true);\n    });\n    return output;\n  }\n  // Handlers for different data types\n  const handlers = {\n    // Handle cases where data is undefined or null\n    undefined: function () {\n      return outputOptions.color ? chalk.gray(\"null\") : \"null\";\n    },\n    null: function () {\n      return outputOptions.color ? chalk.gray(\"null\") : \"null\";\n    },\n    // Handle numbers\n    number: function (x) {\n      return outputOptions.color ? chalk.blueBright(x.toString()) : x.toString();\n    },\n    // Handle booleans\n    boolean: function (x) {\n      return outputOptions.color ? chalk.magenta(x ? \"true\" : \"false\") : x ? \"true\" : \"false\";\n    },\n    // Handle strings\n    string: function (x) {\n      const str = outputOptions.color ? chalk.yellow(x.toString()) : x.toString();\n      return outputOptions.doubleQuotesForValues ? '\"' + str + '\"' : str;\n    },\n    // Handle arrays, check for circular references\n    array: function (x) {\n      if (visited.has(x)) {\n        return outputOptions.color ? chalk.red(\"[Circular]\") : \"[Circular]\";\n      }\n      visited.add(x);\n      const output = handleArray(x);\n      visited.delete(x);\n      return output;\n    },\n    // Handle objects, check for circular references\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    object: function (x, inArray) {\n      if (visited.has(x)) {\n        return outputOptions.color ? chalk.red(\"[Circular]\") : \"[Circular]\";\n      }\n      visited.add(x);\n      const output = handleObject(x);\n      visited.delete(x);\n      return output;\n    },\n    // Handle dates\n    date: function (x) {\n      return outputOptions.color ? chalk.cyan(x.toISOString()) : x.toISOString();\n    },\n    // Handle regular expressions\n    regexp: function (x) {\n      return outputOptions.color ? chalk.redBright(x.toString()) : x.toString();\n    },\n    // Handle functions\n    function: function () {\n      return outputOptions.color ? chalk.blue(\"[object Function]\") : \"[object Function]\";\n    }\n  };\n  // Start the conversion with the root data and return the final result\n  return handlers[getType(data)](data, false).replace(/}json-to-plain-text-special-string-(\\d+){/g, (match, number) => {\n    const space = parseInt(number, 10);\n    return outputOptions.spacing ? \" \".repeat(indentLevel - space) + \" : \" : \" : \";\n  });\n}\nexport { jsonToPlainText };","map":{"version":3,"names":["chalk","jsonToPlainText","data","options","visited","Set","indentLevel","defaultOptions","color","spacing","squareBracketsForArray","doubleQuotesForKeys","doubleQuotesForValues","mergedOptions","outputOptions","getType","variable","type","Array","isArray","Date","RegExp","handleArray","arr","output","length","forEach","item","index","handler","handlers","Error","handleObject","obj","Object","keys","key","value","greenBright","green","undefined","gray","null","number","x","blueBright","toString","boolean","magenta","string","str","yellow","array","has","red","add","delete","object","inArray","date","cyan","toISOString","regexp","redBright","function","blue","replace","match","space","parseInt","repeat"],"sources":["C:/Users/LENOVO/node_modules/json-to-plain-text/dist/index.js"],"sourcesContent":["// MIT License\n// Copyright (c) 2021 Emmadi Sumith Kumar\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nimport chalk from \"chalk\";\n/**\n * Convert JSON-like data or plain JavaScript objects to formatted plain text representation.\n *\n * @function jsonToPlainText\n * @param data {unknown} - The input data to convert. Can be JSON-like data or plain JavaScript objects.\n * @param options {Options} - (Optional) Configuration options for customizing the output.\n *   - color {boolean} - Whether to apply colors to the output (default: true).\n *   - spacing {boolean} - Whether to include spacing after colons (default: true).\n *   - squareBracketsForArray {boolean} - Whether to use square brackets for arrays (default: false).\n *   - doubleQuotesForKeys {boolean} - Whether to use double quotes for object keys (default: false).\n *   - doubleQuotesForValues {boolean} - Whether to use double quotes for string values (default: false).\n * @returns {string} - The formatted plain text representation of the input data.\n * @example\n * // Basic usage:\n * const data = { name: \"John\", age: 30, isEmployed: true };\n * const options = {\n *    color: true,\n *    spacing: true,\n *    squareBracketsForArray: false,\n *    doubleQuotesForKeys: false,\n *    doubleQuotesForValues: false,\n * }\n * const plainText = jsonToPlainText(data);\n * console.log(plainText);\n *\n * // Output:\n * //\n * //   name : \"John\",\n * //   age : 30,\n * //   isEmployed : true\n */\nfunction jsonToPlainText(data, options) {\n    const visited = new Set();\n    let indentLevel = 1;\n    const defaultOptions = {\n        color: true,\n        spacing: true,\n        squareBracketsForArray: false,\n        doubleQuotesForKeys: false,\n        doubleQuotesForValues: false,\n    };\n    const mergedOptions = { ...defaultOptions, ...options }; // Merge user-provided options with default options\n    const outputOptions = {\n        color: mergedOptions.color,\n        spacing: mergedOptions.spacing,\n        squareBracketsForArray: mergedOptions.squareBracketsForArray,\n        doubleQuotesForKeys: mergedOptions.doubleQuotesForKeys,\n        doubleQuotesForValues: mergedOptions.doubleQuotesForValues,\n    };\n    // Helper function to determine the type of a variable\n    function getType(variable) {\n        const type = typeof variable;\n        // Identify the specific type for object-like variables (null, array, object, date, regexp)\n        if (type === \"object\") {\n            if (variable === null)\n                return \"null\";\n            if (Array.isArray(variable))\n                return \"array\";\n            if (variable instanceof Date)\n                return \"date\";\n            if (variable instanceof RegExp)\n                return \"regexp\";\n            return \"object\";\n        }\n        return type;\n    }\n    // Helper function to handle arrays\n    function handleArray(arr) {\n        let output = \"\";\n        if (arr.length === 0) {\n            output += \"[]\";\n            return output;\n        }\n        arr.forEach((item, index) => {\n            const handler = handlers[getType(item)];\n            if (!handler) {\n                throw new Error(\"Unsupported data type: \" + getType(item));\n            }\n            if (index === 0) {\n                output += handler(item, true);\n            }\n            else {\n                output += \", \" + handler(item, true);\n            }\n        });\n        return outputOptions.squareBracketsForArray ? \"[ \" + output + \" ]\" : output;\n    }\n    // Helper function to handle objects\n    function handleObject(obj) {\n        let output = \"\";\n        if (Object.keys(obj).length === 0) {\n            output += \"{}\";\n            return output;\n        }\n        const keys = Object.keys(obj);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        keys.forEach((key, index) => {\n            const value = obj[key];\n            const handler = handlers[getType(value)];\n            if (typeof value === \"undefined\") {\n                return;\n            }\n            if (!handler) {\n                throw new Error(\"Unsupported data type: \" + getType(value));\n            }\n            if (key.length >= indentLevel) {\n                indentLevel = key.length;\n            }\n            output +=\n                \"\\n\" +\n                    (outputOptions.doubleQuotesForKeys\n                        ? '\"' + (outputOptions.color ? chalk.greenBright(key) : key) + '\"'\n                        : outputOptions.color\n                            ? chalk.green(key)\n                            : key) +\n                    \"}json-to-plain-text-special-string-\" +\n                    key.length +\n                    \"{\" +\n                    handler(value, true);\n        });\n        return output;\n    }\n    // Handlers for different data types\n    const handlers = {\n        // Handle cases where data is undefined or null\n        undefined: function () {\n            return outputOptions.color ? chalk.gray(\"null\") : \"null\";\n        },\n        null: function () {\n            return outputOptions.color ? chalk.gray(\"null\") : \"null\";\n        },\n        // Handle numbers\n        number: function (x) {\n            return outputOptions.color\n                ? chalk.blueBright(x.toString())\n                : x.toString();\n        },\n        // Handle booleans\n        boolean: function (x) {\n            return outputOptions.color\n                ? chalk.magenta(x ? \"true\" : \"false\")\n                : x\n                    ? \"true\"\n                    : \"false\";\n        },\n        // Handle strings\n        string: function (x) {\n            const str = outputOptions.color\n                ? chalk.yellow(x.toString())\n                : x.toString();\n            return outputOptions.doubleQuotesForValues ? '\"' + str + '\"' : str;\n        },\n        // Handle arrays, check for circular references\n        array: function (x) {\n            if (visited.has(x)) {\n                return outputOptions.color ? chalk.red(\"[Circular]\") : \"[Circular]\";\n            }\n            visited.add(x);\n            const output = handleArray(x);\n            visited.delete(x);\n            return output;\n        },\n        // Handle objects, check for circular references\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        object: function (x, inArray) {\n            if (visited.has(x)) {\n                return outputOptions.color ? chalk.red(\"[Circular]\") : \"[Circular]\";\n            }\n            visited.add(x);\n            const output = handleObject(x);\n            visited.delete(x);\n            return output;\n        },\n        // Handle dates\n        date: function (x) {\n            return outputOptions.color\n                ? chalk.cyan(x.toISOString())\n                : x.toISOString();\n        },\n        // Handle regular expressions\n        regexp: function (x) {\n            return outputOptions.color ? chalk.redBright(x.toString()) : x.toString();\n        },\n        // Handle functions\n        function: function () {\n            return outputOptions.color\n                ? chalk.blue(\"[object Function]\")\n                : \"[object Function]\";\n        },\n    };\n    // Start the conversion with the root data and return the final result\n    return handlers[getType(data)](data, false).replace(/}json-to-plain-text-special-string-(\\d+){/g, (match, number) => {\n        const space = parseInt(number, 10);\n        return outputOptions.spacing\n            ? \" \".repeat(indentLevel - space) + \" : \"\n            : \" : \";\n    });\n}\nexport { jsonToPlainText };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}