{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var typeOf = require('remedial').typeOf;\n  var trimWhitespace = require('remove-trailing-spaces');\n  function stringify(data) {\n    var handlers,\n      indentLevel = '';\n    handlers = {\n      \"undefined\": function () {\n        // objects will not have `undefined` converted to `null`\n        // as this may have unintended consequences\n        // For arrays, however, this behavior seems appropriate\n        return 'null';\n      },\n      \"null\": function () {\n        return 'null';\n      },\n      \"number\": function (x) {\n        return x;\n      },\n      \"boolean\": function (x) {\n        return x ? 'true' : 'false';\n      },\n      \"string\": function (x) {\n        // to avoid the string \"true\" being confused with the\n        // the literal `true`, we always wrap strings in quotes\n        return JSON.stringify(x);\n      },\n      \"array\": function (x) {\n        var output = '';\n        if (0 === x.length) {\n          output += '[]';\n          return output;\n        }\n        indentLevel = indentLevel.replace(/$/, '  ');\n        x.forEach(function (y, i) {\n          // TODO how should `undefined` be handled?\n          var handler = handlers[typeOf(y)];\n          if (!handler) {\n            throw new Error('what the crap: ' + typeOf(y));\n          }\n          output += '\\n' + indentLevel + '- ' + handler(y, true);\n        });\n        indentLevel = indentLevel.replace(/  /, '');\n        return output;\n      },\n      \"object\": function (x, inArray, rootNode) {\n        var output = '';\n        if (0 === Object.keys(x).length) {\n          output += '{}';\n          return output;\n        }\n        if (!rootNode) {\n          indentLevel = indentLevel.replace(/$/, '  ');\n        }\n        Object.keys(x).forEach(function (k, i) {\n          var val = x[k],\n            handler = handlers[typeOf(val)];\n          if ('undefined' === typeof val) {\n            // the user should do\n            // delete obj.key\n            // and not\n            // obj.key = undefined\n            // but we'll error on the side of caution\n            return;\n          }\n          if (!handler) {\n            throw new Error('what the crap: ' + typeOf(val));\n          }\n          if (!(inArray && i === 0)) {\n            output += '\\n' + indentLevel;\n          }\n          output += k + ': ' + handler(val);\n        });\n        indentLevel = indentLevel.replace(/  /, '');\n        return output;\n      },\n      \"function\": function () {\n        // TODO this should throw or otherwise be ignored\n        return '[object Function]';\n      }\n    };\n    return trimWhitespace(handlers[typeOf(data)](data, true, true) + '\\n');\n  }\n  module.exports.stringify = stringify;\n})();","map":{"version":3,"names":["typeOf","require","trimWhitespace","stringify","data","handlers","indentLevel","undefined","null","number","x","boolean","string","JSON","array","output","length","replace","forEach","y","i","handler","Error","object","inArray","rootNode","Object","keys","k","val","function","module","exports"],"sources":["C:/Users/LENOVO/node_modules/json-to-pretty-yaml/index.js"],"sourcesContent":["(function() {\n    \"use strict\";\n\n    var typeOf = require('remedial').typeOf;\n    var trimWhitespace = require('remove-trailing-spaces');\n\n    function stringify(data) {\n        var handlers, indentLevel = '';\n\n        handlers = {\n            \"undefined\": function() {\n                // objects will not have `undefined` converted to `null`\n                // as this may have unintended consequences\n                // For arrays, however, this behavior seems appropriate\n                return 'null';\n            },\n            \"null\": function() {\n                return 'null';\n            },\n            \"number\": function(x) {\n                return x;\n            },\n            \"boolean\": function(x) {\n                return x ? 'true' : 'false';\n            },\n            \"string\": function(x) {\n                // to avoid the string \"true\" being confused with the\n                // the literal `true`, we always wrap strings in quotes\n                return JSON.stringify(x);\n            },\n            \"array\": function(x) {\n                var output = '';\n\n                if (0 === x.length) {\n                    output += '[]';\n                    return output;\n                }\n\n                indentLevel = indentLevel.replace(/$/, '  ');\n                x.forEach(function(y, i) {\n                    // TODO how should `undefined` be handled?\n                    var handler = handlers[typeOf(y)];\n\n                    if (!handler) {\n                        throw new Error('what the crap: ' + typeOf(y));\n                    }\n\n                    output += '\\n' + indentLevel + '- ' + handler(y, true);\n\n                });\n                indentLevel = indentLevel.replace(/  /, '');\n\n                return output;\n            },\n            \"object\": function(x, inArray, rootNode) {\n                var output = '';\n\n                if (0 === Object.keys(x).length) {\n                    output += '{}';\n                    return output;\n                }\n\n                if (!rootNode) {\n                    indentLevel = indentLevel.replace(/$/, '  ');\n                }\n\n                Object.keys(x).forEach(function(k, i) {\n                    var val = x[k],\n                        handler = handlers[typeOf(val)];\n\n                    if ('undefined' === typeof val) {\n                        // the user should do\n                        // delete obj.key\n                        // and not\n                        // obj.key = undefined\n                        // but we'll error on the side of caution\n                        return;\n                    }\n\n                    if (!handler) {\n                        throw new Error('what the crap: ' + typeOf(val));\n                    }\n\n                    if (!(inArray && i === 0)) {\n                        output += '\\n' + indentLevel;\n                    }\n\n                    output += k + ': ' + handler(val);\n                });\n                indentLevel = indentLevel.replace(/  /, '');\n\n                return output;\n            },\n            \"function\": function() {\n                // TODO this should throw or otherwise be ignored\n                return '[object Function]';\n            }\n        };\n\n        return trimWhitespace(handlers[typeOf(data)](data, true, true) + '\\n');\n    }\n\n    module.exports.stringify = stringify;\n}());\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}